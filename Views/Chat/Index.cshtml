@using System.Security.Claims
@{
    ViewData["Title"] = "Chat";
    var userRole = User.FindFirst(ClaimTypes.Role)?.Value;
    var isAdmin = userRole == "Admin";
    var targetUserName = ViewBag.TargetUserName as string ?? "Khách hàng";
    var chatTitle = isAdmin ? $"Chat với {targetUserName}" : "Chat với Admin";
    var currentUserId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
}

<!-- **CẬP NHẬT DEBUG INFO** -->
<div style="background: yellow; padding: 10px; margin: 10px;">
    <strong>Debug Info:</strong><br>
    UserRole: @userRole<br>
    IsAdmin: @isAdmin<br>
    TargetUserName: @ViewBag.TargetUserName<br>
    TargetUserId: @ViewBag.TargetUserId<br>
    TargetUserId Type: @(ViewBag.TargetUserId?.GetType().Name)<br>
    ChatTitle: @chatTitle<br>
    CurrentUserId: @currentUserId
</div>

<div class="container mt-4">
    <div class="row">
        <!-- SIDEBAR DANH SÁCH KHÁCH HÀNG ---------------------------- -->
        <input type="hidden" id="receiverId" value="@(ViewBag.TargetUserId ?? "")" />

        <!-- Phần sidebar chỉ hiển thị cho admin -->
        @if (isAdmin)
        {
            <div class="col-md-4 border-end">
                <div class="d-flex align-items-center justify-content-between p-2 border-bottom">
                    <h6 class="mb-0">Khách hàng</h6>
                    <button class="btn btn-sm btn-outline-primary" onclick="loadConversationList()">
                        <i class="bi bi-arrow-clockwise"></i>
                    </button>
                </div>
                <ul id="conversationList" class="list-group list-group-flush"></ul>
            </div>
        }
        <!-- KHU VỰC CHAT ---------------------------------------------- -->
        <div class="@((isAdmin) ? "col-md-8" : "col-md-12")">
            <div class="card chat-container">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">
                        <i class="bi bi-chat-dots me-2"></i>@chatTitle
                    </h5>
                    <small>@(isAdmin ? $"Đang hỗ trợ: {targetUserName}" : "Liên hệ hỗ trợ")</small>
                </div>

                <div class="card-body p-0">
                    <div id="messagesList" class="chat-messages">
                        <!-- Messages will be loaded here -->
                    </div>
                </div>

                <div class="card-footer">
                    <div class="input-group">
                        <input type="text" id="messageInput" class="form-control" placeholder="Nhập tin nhắn...">
                        <button class="btn btn-primary" onclick="sendMessage()">
                            <i class="bi bi-send"></i> Gửi
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- **SỬA CÁC HIDDEN INPUTS** -->
<input type="hidden" id="currentUserId" value="@currentUserId" />
<input type="hidden" id="userName" value="@User.Identity.Name" />
<input type="hidden" id="userRole" value="@userRole" />
<input type="hidden" id="receiverId" value="@(ViewBag.TargetUserId ?? "")" />
<input type="hidden" id="targetUserName" value="@(ViewBag.TargetUserName ?? "")" />

<style>
    .chat-container {
        height: 70vh;
        display: flex;
        flex-direction: column;
    }

    .chat-messages {
        height: 400px;
        overflow-y: auto;
        padding: 15px;
        background-color: #f8f9fa;
        flex: 1;
    }

    .message {
        margin-bottom: 15px;
        display: flex;
        align-items: flex-end;
    }

    .message.sent {
        justify-content: flex-end;
    }

    .message.received {
        justify-content: flex-start;
    }

    .message-bubble {
        max-width: 70%;
        padding: 10px 15px;
        border-radius: 18px;
        position: relative;
    }

    .message.sent .message-bubble {
        background: linear-gradient(135deg, #007bff, #0056b3);
        color: white;
        border-bottom-right-radius: 5px;
    }

    .message.received .message-bubble {
        background: white;
        color: #333;
        border: 1px solid #e9ecef;
        border-bottom-left-radius: 5px;
    }

    .message-sender {
        font-weight: 600;
        font-size: 0.85em;
        margin-bottom: 2px;
    }

    .message.sent .message-sender {
        color: #b3d7ff;
    }

    .message.received .message-sender {
        color: #007bff;
    }

    .message-content {
        line-height: 1.4;
    }

    .message-time {
        font-size: 0.75em;
        opacity: 0.7;
        margin-top: 5px;
    }

    .message.sent .message-time {
        color: #b3d7ff;
    }

    .message.received .message-time {
        color: #6c757d;
    }

    .chat-messages::-webkit-scrollbar {
        width: 6px;
    }

    .chat-messages::-webkit-scrollbar-track {
        background: #f1f1f1;
    }

    .chat-messages::-webkit-scrollbar-thumb {
        background: #c1c1c1;
        border-radius: 3px;
    }

    .chat-messages::-webkit-scrollbar-thumb:hover {
        background: #a8a8a8;
    }

    .input-group .btn {
        border-radius: 0 0.375rem 0.375rem 0;
    }

    #conversationList {
        max-height: 70vh;
        overflow-y: auto;
    }

    #conversationList li {
        cursor: pointer;
        transition: background-color 0.2s;
    }

    #conversationList li:hover {
        background-color: #f8f9fa;
    }

    #conversationList .active-chat {
        background-color: #e9f7fe;
        border-left: 3px solid #007bff;
    }

    .message-sender {
        font-weight: 600;
        font-size: 0.85em;
        margin-bottom: 4px;
        color: #6c757d;
    }

    .message.sent .message-sender {
        text-align: right;
    }

    .message.received .message-sender {
        text-align: left;
    }

    .message-bubble {
        max-width: 70%;
        padding: 10px 15px;
        border-radius: 18px;
        display: inline-block;
    }

    .message.sent .message-bubble {
        background: #007bff;
        color: white;
        border-bottom-right-radius: 5px;
    }

    .message.received .message-bubble {
        background: #f1f1f1;
        color: #333;
        border-bottom-left-radius: 5px;
    }

    .message-content {
        line-height: 1.4;
    }

    .message-time {
        font-size: 0.75em;
        opacity: 0.7;
        margin-top: 5px;
        display: block;
        text-align: right;
    }
</style>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.0/signalr.min.js"></script>
    <script>
        /* ---------------- SETUP CHUNG (đã có sẵn) ----------------------- */
        const connection = new signalR.HubConnectionBuilder().withUrl("/chathub").build();
        const currentUserId = document.getElementById("currentUserId").value;
        let receiverId = parseInt(document.getElementById("receiverId").value);

        /* ---------------- DANH SÁCH KHÁCH HÀNG -------------------------- */
        function loadConversationList() {
            fetch('/Chat/GetConversations')
                .then(response => response.json())
                .then(conversations => {
                    const list = document.getElementById('conversationList');
                    list.innerHTML = '';

                    conversations.forEach(conv => {
                        const item = document.createElement('li');
                        item.className = 'list-group-item list-group-item-action';
                        item.innerHTML = `
                                                                                <div class="d-flex justify-content-between">
                                                                                    <strong>${conv.userName}</strong>
                                                                                    <small>${formatTime(conv.lastTime)}</small>
                                                                                </div>
                                                                                <p class="mb-0 text-truncate">${conv.lastMsg}</p>
                                                                            `;

                        item.addEventListener('click', () => {
                            /* --- CẬP NHẬT BIẾN TOÀN CỤC --- */
                            receiverId = conv.userId;                         // thêm dòng này ✅

                            // Cập nhật hidden input (để loadChatHistory)
                            document.getElementById('receiverId').value = conv.userId;

                            // Đổi tiêu đề khung chat
                            document.querySelector('.chat-header h5').innerHTML =
                                `<i class="bi bi-chat-dots me-2"></i>Chat với ${conv.userName}`;

                            // Nạp lịch sử
                            loadChatHistory();
                        });

                        list.appendChild(item);
                    });
                });
        }
        function formatTime(dateString) {
            const date = new Date(dateString);
            return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        }
        function selectUser(userId, userName) {
            receiverId = userId;
            document.getElementById('receiverId').value = userId;
            document.querySelector('.card-header h5')
                .innerHTML = `<i class="bi bi-chat-dots me-2"></i>Chat với ${userName}`;
            loadChatHistory();
        }

        /* ---------------- TIN NHẮN & THÔNG BÁO -------------------------- */
        connection.on("ReceiveMessage", (senderName, msg, role, senderId) => { addMessageToChat(senderName, msg, role, senderId); });
        connection.on("NewMessageNotification", (senderId, senderName) => {
            // Làm mới sidebar, badge...
            loadConversationList();
        });
        connection.start().then(() => {
            loadConversationList();      // lần đầu
            loadChatHistory();           // cuộc trò chuyện hiện tại
        });

        /* ---------------- GỬI TIN NHẮN --------------------------------- */
        /* ---------------- GỬI TIN NHẮN --------------------------------- */
        function sendMessage() {
            const input = document.getElementById('messageInput');
            const message = input.value.trim();
            let receiverId = parseInt(document.getElementById('receiverId').value);
            const userRole = document.getElementById('userRole').value;

            if (!message) {
                showError('Vui lòng nhập tin nhắn!');
                return;
            }

            // Nếu là admin và không có receiverId hợp lệ
            if (userRole === 'Admin' && (!receiverId || isNaN(receiverId))) {
                showError('Vui lòng chọn một khách hàng để chat!');
                return;
            }

            // Nếu là user thì receiverId có thể null (sẽ tự động gửi cho admin)
            if (userRole !== 'Admin') {
                receiverId = null; // Để server tự động tìm admin
            }

            connection.invoke("SendMessage", message, receiverId)
                .then(() => {
                    input.value = "";
                    hideError();
                })
                .catch(err => {
                    console.error('Error sending message:', err.toString());
                    showError('Lỗi gửi tin nhắn: ' + err.message);
                });
        }

        /* ---------------- THÊM CÁC HÀM XỬ LÝ LỖI ------------------------ */
        function showError(message) {
            // Tạo hoặc cập nhật thông báo lỗi
            let errorDiv = document.getElementById('errorMessage');
            if (!errorDiv) {
                errorDiv = document.createElement('div');
                errorDiv.id = 'errorMessage';
                errorDiv.className = 'alert alert-danger mt-2';
                errorDiv.style.display = 'none';
                document.querySelector('.card-footer').appendChild(errorDiv);
            }

            errorDiv.textContent = message;
            errorDiv.style.display = 'block';

            // Tự động ẩn sau 5 giây
            setTimeout(() => {
                hideError();
            }, 5000);
        }

        function hideError() {
            const errorDiv = document.getElementById('errorMessage');
            if (errorDiv) {
                errorDiv.style.display = 'none';
            }
        }

        /* ---------------- CẬP NHẬT LOAD CONVERSATION LIST --------------- */
        function loadConversationList() {
            fetch('/Chat/GetConversations')
                .then(response => response.json())
                .then(conversations => {
                    const list = document.getElementById('conversationList');
                    list.innerHTML = '';

                    conversations.forEach(conv => {
                        const item = document.createElement('li');
                        item.className = 'list-group-item list-group-item-action';

                        // Kiểm tra xem có phải cuộc trò chuyện hiện tại không
                        const currentReceiverId = parseInt(document.getElementById('receiverId').value);
                        if (conv.userId === currentReceiverId) {
                            item.classList.add('active-chat');
                        }

                        item.innerHTML = `
                        <div class="d-flex justify-content-between">
                            <strong>${conv.userName}</strong>
                            <small>${formatTime(conv.lastTime)}</small>
                        </div>
                        <p class="mb-0 text-truncate">${conv.lastMsg}</p>
                    `;

                        item.addEventListener('click', () => {
                            // Xóa active class từ tất cả items
                            document.querySelectorAll('#conversationList .active-chat')
                                .forEach(el => el.classList.remove('active-chat'));

                            // Thêm active class cho item được chọn
                            item.classList.add('active-chat');

                            // Cập nhật biến toàn cục
                            receiverId = conv.userId;
                            document.getElementById('receiverId').value = conv.userId;
                            document.getElementById('targetUserName').value = conv.userName;

                            // Đổi tiêu đề khung chat
                            const chatHeader = document.querySelector('.card-header h5');
                            if (chatHeader) {
                                chatHeader.innerHTML = `<i class="bi bi-chat-dots me-2"></i>Chat với ${conv.userName}`;
                            }

                            // Nạp lịch sử
                            loadChatHistory();
                        });

                        list.appendChild(item);
                    });
                })
                .catch(error => {
                    console.error('Error loading conversations:', error);
                    showError('Không thể tải danh sách cuộc trò chuyện');
                });
        }

        /* ---------------- CẬP NHẬT LOAD CHAT HISTORY ------------------- */
        function loadChatHistory() {
            const receiverId = document.getElementById('receiverId').value;

            if (!receiverId) {
                console.log('No receiverId set, skipping chat history load');
                return;
            }

            fetch(`/Chat/GetHistory?otherUserId=${receiverId}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(messages => {
                    const box = document.getElementById('messagesList');
                    box.innerHTML = '';

                    messages.forEach(m => {
                        addMessageToChat(m.senderName, m.content, m.senderRole, m.senderId);
                    });
                })
                .catch(error => {
                    console.error('Error loading chat history:', error);
                    showError('Không thể tải lịch sử chat');
                });
        }

        /* Đi kèm các hàm addMessageToChat()… như bạn đã có sẵn */
        function addMessageToChat(senderName, message, role, senderId) {
            const chatMessages = document.getElementById('messagesList'); // Hoặc 'chatMessages' tùy view
            const messageDiv = document.createElement('div');

            // Xác định tin nhắn gửi đi hay nhận về
            const isSender = senderId == currentUserId;
            messageDiv.className = `message ${isSender ? 'sent' : 'received'}`;

            // Xác định tên hiển thị: nếu là mình thì hiển thị "Bạn"
            const displayName = isSender ? "Bạn" : senderName;

            // Tạo cấu trúc tin nhắn
            messageDiv.innerHTML = `
                                                    <div class="message-sender">${displayName}</div>
                                                    <div class="message-bubble">
                                                        <div class="message-content">${message}</div>
                                                        <div class="message-time">${new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</div>
                                                    </div>
                                                `;

            chatMessages.appendChild(messageDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }
    </script>
}
