@if (Context.Session.GetString("UserName") != null)
{
    <!-- Chat Toggle Button -->
    <div id="chatToggle" class="chat-toggle">
        <i class="bi bi-chat-dots"></i>
        <span id="chatBadge" class="chat-badge d-none">0</span>
    </div>

    <!-- Chat Widget -->
    <div id="chatWidget" class="chat-widget d-none">
        <div class="chat-header">
            <div>
                <h5 id="chatTitle"><i class="bi bi-chat-dots me-2"></i>ƒêang t·∫£i...</h5>
                <small id="chatSubTitle"></small>
            </div>
            <button class="btn-close"></button>
        </div>
        <div id="chatMessages" class="chat-messages">
            <!-- Messages will be loaded here -->
        </div>
        <div class="chat-input">
            <div class="input-group">
                <input type="text" id="messageInput" class="form-control" placeholder="Nh·∫≠p tin nh·∫Øn...">
                <button class="btn btn-primary" id="sendButton">
                    <i class="bi bi-send me-1"></i>G·ª≠i
                </button>
            </div>
        </div>
        <div id="errorMessage" class="alert alert-danger d-none" style="margin: 10px;"></div>
    </div> 
}

<style>
        .chat-toggle {
        position: fixed !important;
        bottom: 20px !important;
        right: 20px !important;
        width: 60px;
        height: 60px;
        background: #007bff;
        color: white;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        z-index: 9999 !important; /* Cao h∆°n ƒë·ªÉ tr√°nh b·ªã che */
        font-size: 24px;
        transition: all 0.3s ease;
    }

    .chat-toggle:hover {
        transform: scale(1.1);
        background: #0056b3;
    }

    .chat-badge {
        position: absolute;
        top: -5px;
        right: -5px;
        background: #dc3545;
        color: white;
        border-radius: 50%;
        width: 20px;
        height: 20px;
        font-size: 12px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .chat-widget {
        position: fixed !important;
        bottom: 90px !important;
        right: 20px !important;
        width: 350px;
        height: 400px;
        background: white;
        border-radius: 10px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
        z-index: 9998 !important; /* Cao nh∆∞ng th·∫•p h∆°n toggle button */
        display: flex;
        flex-direction: column;
        transform: none !important; /* Tr√°nh transform t·ª´ admin layout */
    }

    .chat-header {
        background: linear-gradient(135deg, #007bff, #0056b3);
        color: white;
        padding: 12px 20px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-radius: 10px 10px 0 0;
        min-height: 50px;
    }

    .chat-header h5 {
        margin: 0;
        font-weight: 600;
        font-size: 1.1rem;
        color: #fff !important;
        line-height: 1;
    }

    .chat-header small {
        opacity: 0.9;
        font-size: 0.85em;
        display: block;
        margin-top: 2px;
        color: #fff;
    }

    .chat-messages {
        flex: 1;
        padding: 10px;
        overflow-y: auto;
        border-bottom: 1px solid #eee;
    }

    .chat-input {
        padding: 10px;
    } 

    /* Conversation List Widget */
    .conversation-list-widget {
        position: fixed;
        bottom: 90px;
        right: 20px;
        width: 350px;
        max-height: 400px;
        background: white;
        border-radius: 10px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
        z-index: 999;
        display: flex;
        flex-direction: column;
    }

    .conversation-list-header {
        background: linear-gradient(135deg, #007bff, #0056b3);
        color: white;
        padding: 12px 20px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-radius: 10px 10px 0 0;
    }

    .conversation-list-content {
        max-height: 350px;
        overflow-y: auto;
        padding: 10px;
    }

    .conversation-item {
        padding: 10px;
        border-bottom: 1px solid #e9ecef;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .conversation-item:hover {
        background: #f8f9fa;
    }

    .conversation-item.active {
        background: #e7f3ff;
    }

    .conversation-name {
        font-weight: 600;
        color: #212529;
    }

    .conversation-preview {
        font-size: 0.85em;
        color: #6c757d;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    .conversation-time {
        font-size: 0.75em;
        color: #adb5bd;
    }

    /* Nhi·ªÅu khung chat */
    .chat-widget {
        position: fixed;
        bottom: 90px;
        right: 20px;
        width: 350px;
        height: 400px;
        background: white;
        border-radius: 10px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
        z-index: 998;
        display: flex;
        flex-direction: column;
        transition: all 0.3s ease;
    }

    .chat-widget.draggable {
        cursor: move;
    }

    /* CƒÉn ch·ªânh nhi·ªÅu khung chat */
    .chat-widget:nth-child(2) {
        right: 380px;
    }

    .chat-widget:nth-child(3) {
        right: 740px;
    }

    .message {
        margin-bottom: 20px;
        display: flex;
        align-items: flex-end;
        animation: fadeInUp 0.3s ease;
    }

    .message.sent {
        justify-content: flex-end;
    }

    .message.received {
        justify-content: flex-start;
    }

    .message-bubble {
        max-width: 70%;
        padding: 15px 20px;
        border-radius: 20px;
        position: relative;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        word-wrap: break-word;
    }

    .message.sent .message-bubble {
        background: linear-gradient(135deg, #007bff, #0056b3);
        color: white;
        border-bottom-right-radius: 8px;
    }

    .message.received .message-bubble {
        background: white;
        color: #333;
        border: 1px solid #e9ecef;
        border-bottom-left-radius: 8px;
    }

    .message-sender {
        font-weight: 600;
        font-size: 0.85em;
        margin-bottom: 5px;
        opacity: 0.8;
    }

    .message.sent .message-sender {
        color: #b3d7ff;
        text-align: right;
    }

    .message.received .message-sender {
        color: #007bff;
    }

    .message-content {
        line-height: 1.5;
        word-wrap: break-word;
    }

    .message-time {
        font-size: 0.75em;
        opacity: 0.7;
        margin-top: 8px;
        text-align: right;
        display: block;
    }

    .message.sent .message-time {
        color: #b3d7ff;
    }

    .message.received .message-time {
        color: #6c757d;
    }

    .chat-header i {
        font-size: 1.3em;
        margin-right: 8px;
        color: #fff;
    }

    .input-group {
        display: flex;
        align-items: center;
    }

    .input-group .form-control {
        border: 2px solid #e9ecef;
        border-radius: 25px 0 0 25px;
        padding: 12px 20px;
        font-size: 0.95em;
        height: 48px;
        margin: 0;
        flex: 1;
    }

    .input-group .form-control:focus {
        border-color: #007bff;
        box-shadow: none;
    }

    .input-group .btn {
        border-radius: 0 25px 25px 0;
        padding: 12px 25px;
        font-weight: 600;
        background: linear-gradient(135deg, #007bff, #0056b3);
        border: none;
        height: 48px;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0;
    }

    .input-group .btn:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(0, 123, 255, 0.3);
    }
</style>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.0/signalr.min.js"></script>
<script>
(function() {
    'use strict';
    
    console.log('üîÑ ChatWidget script loading...');

    // Conflict detection
    const pageType = document.body.getAttribute('data-page');
    if (pageType === 'admin-multichat' || typeof window.MultiChatApp !== 'undefined') {
        console.log('üö´ ChatWidget disabled - conflict detected');
        return;
    }

    // Wait for DOM to be ready
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initChatWidget);
    } else {
        initChatWidget();
    }

    function initChatWidget() {
        console.log('üöÄ ChatWidget initializing...');

        // Get DOM elements
        const chatToggle = document.getElementById('chatToggle');
        const chatWidget = document.getElementById('chatWidget');
        const chatMessages = document.getElementById('chatMessages');
        const messageInput = document.getElementById('messageInput');
        const sendButton = document.getElementById('sendButton');
        const closeButton = chatWidget?.querySelector('.btn-close');
        const chatBadge = document.getElementById('chatBadge');
        const chatTitle = document.getElementById('chatTitle');
        const errorDiv = document.getElementById('errorMessage');

        // Early exit if critical elements missing
        if (!chatToggle || !chatWidget || !messageInput || !sendButton) {
            console.log('‚ùå Critical ChatWidget elements missing');
            return;
        }

        // Variables
        let chatConnection = null;
        let unreadCount = 0;
        let targetUserId = null;
        const currentUserId = '@(User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value ?? "0")';

        console.log('üë§ Current User ID:', currentUserId);

        // Initialize SignalR
        function initSignalR() {
            console.log('üîó Initializing SignalR connection...');
            
            chatConnection = new signalR.HubConnectionBuilder()
                .withUrl("/chathub")
                .withAutomaticReconnect()
                .build();

            // Store globally for debugging
            window.chatConnection = chatConnection;

            chatConnection.on("ReceiveMessage", (senderName, message, role, senderId) => {
                console.log('üì® Message received:', { senderName, message, senderId });
                addMessage(senderName, message, role, senderId);
                
                if (chatWidget.classList.contains('d-none')) {
                    unreadCount++;
                    updateBadge();
                }
            });

            chatConnection.onclose(() => {
                console.log('‚ùå SignalR connection closed');
                showError('M·∫•t k·∫øt n·ªëi. Th·ª≠ g·ª≠i tin nh·∫Øn ƒë·ªÉ k·∫øt n·ªëi l·∫°i.');
            });

            return chatConnection.start()
                .then(() => {
                    console.log('‚úÖ SignalR connected successfully');
                    hideError();
                    return fetchChatTarget();
                })
                .catch(err => {
                    console.error('‚ùå SignalR connection failed:', err);
                    showError('Kh√¥ng th·ªÉ k·∫øt n·ªëi chat');
                    throw err;
                });
        }

        // Fetch chat target (admin)
        function fetchChatTarget() {
            return fetch('/Chat/GetChatTarget')
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        targetUserId = data.targetUserId;
                        if (chatTitle) {
                            chatTitle.innerHTML = `<i class="bi bi-chat-dots me-2"></i>${data.chatTitle}`;
                        }
                        return loadHistory();
                    } else {
                        throw new Error(data.message || 'Kh√¥ng t√¨m th·∫•y admin');
                    }
                })
                .catch(err => {
                    console.error('‚ùå Fetch chat target failed:', err);
                    showError('Kh√¥ng t√¨m th·∫•y admin h·ªó tr·ª£');
                });
        }

        // Load chat history
        function loadHistory() {
            if (!targetUserId) return Promise.resolve();
            
            return fetch(`/Chat/GetHistory?otherUserId=${targetUserId}`)
                .then(response => response.json())
                .then(messages => {
                    console.log(`üìú Loaded ${messages.length} messages`);
                    if (chatMessages) chatMessages.innerHTML = '';
                    messages.forEach(msg => {
                        addMessage(msg.senderName, msg.content, msg.senderRole, msg.senderId);
                    });
                })
                .catch(err => {
                    console.error('‚ùå Load history failed:', err);
                    showError('Kh√¥ng th·ªÉ t·∫£i l·ªãch s·ª≠ chat');
                });
        }

        // Add message to chat
        function addMessage(senderName, content, role, senderId) {
            if (!chatMessages) return;

            const isSender = senderId.toString() === currentUserId;
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${isSender ? 'sent' : 'received'}`;
            
            messageDiv.innerHTML = `
                <div class="message-bubble">
                    <div class="message-sender">${isSender ? 'B·∫°n' : (senderName || 'Admin')}</div>
                    <div class="message-content">${content}</div>
                    <div class="message-time">${new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</div>
                </div>
            `;
            
            chatMessages.appendChild(messageDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        // Send message
        async function sendMessage() {
            const message = messageInput.value.trim();
            if (!message) {
                console.log('‚ö†Ô∏è Empty message, ignoring');
                return;
            }

            console.log('üì§ Sending message:', message);

            // Check connection
            if (!chatConnection) {
                console.log('‚ùå No connection, initializing...');
                showError('ƒêang k·∫øt n·ªëi...');
                try {
                    await initSignalR();
                } catch (err) {
                    console.error('‚ùå Failed to initialize connection');
                    return;
                }
            }

            if (chatConnection.state !== signalR.HubConnectionState.Connected) {
                console.log('‚ùå Connection not ready, reconnecting...');
                showError('ƒêang k·∫øt n·ªëi l·∫°i...');
                try {
                    await chatConnection.start();
                    hideError();
                } catch (err) {
                    console.error('‚ùå Reconnection failed:', err);
                    showError('Kh√¥ng th·ªÉ k·∫øt n·ªëi');
                    return;
                }
            }

            try {
                await chatConnection.invoke("SendMessage", message, targetUserId);
                messageInput.value = '';
                console.log('‚úÖ Message sent successfully');
            } catch (err) {
                console.error('‚ùå Send message failed:', err);
                showError('G·ª≠i tin nh·∫Øn th·∫•t b·∫°i');
            }
        }

        // UI functions
        function toggleChat() {
            chatWidget.classList.toggle('d-none');
            if (!chatWidget.classList.contains('d-none')) {
                unreadCount = 0;
                updateBadge();
                messageInput.focus();
                if (chatMessages) chatMessages.scrollTop = chatMessages.scrollHeight;
            }
        }

        function updateBadge() {
            if (!chatBadge) return;
            if (unreadCount > 0) {
                chatBadge.textContent = unreadCount;
                chatBadge.classList.remove('d-none');
            } else {
                chatBadge.classList.add('d-none');
            }
        }

        function showError(message) {
            if (errorDiv) {
                errorDiv.textContent = message;
                errorDiv.classList.remove('d-none');
            }
        }

        function hideError() {
            if (errorDiv) {
                errorDiv.classList.add('d-none');
            }
        }

        // Event listeners
        chatToggle.addEventListener('click', toggleChat);
        if (closeButton) closeButton.addEventListener('click', toggleChat);
        sendButton.addEventListener('click', sendMessage);
        
        messageInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                sendMessage();
            }
        });

        // Start initialization
        console.log('üöÄ Starting ChatWidget initialization...');
        initSignalR().catch(err => {
            console.error('‚ùå ChatWidget initialization failed:', err);
        });
    }

})();
</script>

<script>
    // Force positioning fix for admin layout
    document.addEventListener('DOMContentLoaded', function() {
        function fixChatPosition() {
            const chatToggle = document.getElementById('chatToggle');
            const chatWidget = document.getElementById('chatWidget');
            
            if (chatToggle) {
                chatToggle.style.position = 'fixed';
                chatToggle.style.bottom = '20px';
                chatToggle.style.right = '20px';
                chatToggle.style.zIndex = '9999';
                chatToggle.style.transform = 'none';
            }
            
            if (chatWidget) {
                chatWidget.style.position = 'fixed';
                chatWidget.style.bottom = '90px';
                chatWidget.style.right = '20px';
                chatWidget.style.zIndex = '9998';
                chatWidget.style.transform = 'none';
                chatWidget.style.left = 'auto';
                chatWidget.style.top = 'auto';
            }
        }
        
        // Fix immediately and on resize
        fixChatPosition();
        window.addEventListener('resize', fixChatPosition);
        
        // Fix after any layout changes
        setTimeout(fixChatPosition, 100);
        setTimeout(fixChatPosition, 500);
    });
</script>