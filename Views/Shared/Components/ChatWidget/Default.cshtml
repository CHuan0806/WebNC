@if (Context.Session.GetString("UserName") != null)
{
    <!-- Chat Toggle Button -->
    <div id="chatToggle" class="chat-toggle" onclick="toggleChat()">
        <i class="bi bi-chat-dots"></i>
        <span id="chatBadge" class="chat-badge d-none">0</span>
    </div>

    <!-- Chat Widget -->
    <div id="chatWidget" class="chat-widget d-none">
        <div class="chat-header">
            <div>
                <h5 id="chatTitle"><i class="bi bi-chat-dots me-2"></i>Đang tải...</h5>
                <small id="chatSubTitle"></small>
            </div>
            <button class="btn-close" onclick="toggleChat()"></button>
        </div>
        <div id="chatMessages" class="chat-messages">
            <!-- Messages will be loaded here -->
        </div>
        <div class="chat-input">
            <div class="input-group">
                <input type="text" id="messageInput" class="form-control" placeholder="Nhập tin nhắn...">
                <button class="btn btn-primary" onclick="sendMessage()">
                    <i class="bi bi-send me-1"></i>Gửi
                </button>
            </div>
        </div>
        <div id="errorMessage" class="alert alert-danger d-none" style="margin: 10px;"></div>
    </div>
}

<style>
    .chat-toggle {
        position: fixed;
        bottom: 20px;
        right: 20px;
        width: 60px;
        height: 60px;
        background: #007bff;
        color: white;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        z-index: 1000;
        font-size: 24px;
        transition: all 0.3s ease;
    }

    .chat-toggle:hover {
        transform: scale(1.1);
        background: #0056b3;
    }

    .chat-badge {
        position: absolute;
        top: -5px;
        right: -5px;
        background: #dc3545;
        color: white;
        border-radius: 50%;
        width: 20px;
        height: 20px;
        font-size: 12px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .chat-widget {
        position: fixed;
        bottom: 90px;
        right: 20px;
        width: 350px;
        height: 400px;
        background: white;
        border-radius: 10px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
        z-index: 999;
        display: flex;
        flex-direction: column;
    }

    .chat-header {
        background: linear-gradient(135deg, #007bff, #0056b3);
        color: white;
        padding: 12px 20px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-radius: 10px 10px 0 0;
        min-height: 50px;
    }

    .chat-header h5 {
        margin: 0;
        font-weight: 600;
        font-size: 1.1rem;
        color: #fff !important;
        line-height: 1;
    }

    .chat-header small {
        opacity: 0.9;
        font-size: 0.85em;
        display: block;
        margin-top: 2px;
        color: #fff;
    }

    .chat-messages {
        flex: 1;
        padding: 10px;
        overflow-y: auto;
        border-bottom: 1px solid #eee;
    }

    .chat-input {
        padding: 10px;
    }

    .message {
        margin-bottom: 20px;
        display: flex;
        align-items: flex-end;
        animation: fadeInUp 0.3s ease;
    }

    .message.sent {
        justify-content: flex-end;
    }

    .message.received {
        justify-content: flex-start;
    }

    .message-bubble {
        max-width: 70%;
        padding: 15px 20px;
        border-radius: 20px;
        position: relative;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        word-wrap: break-word;
    }

    .message.sent .message-bubble {
        background: linear-gradient(135deg, #007bff, #0056b3);
        color: white;
        border-bottom-right-radius: 8px;
    }

    .message.received .message-bubble {
        background: white;
        color: #333;
        border: 1px solid #e9ecef;
        border-bottom-left-radius: 8px;
    }

    .message-sender {
        font-weight: 600;
        font-size: 0.85em;
        margin-bottom: 5px;
        opacity: 0.8;
    }

    .message.sent .message-sender {
        color: #b3d7ff;
        text-align: right;
    }

    .message.received .message-sender {
        color: #007bff;
    }

    .message-content {
        line-height: 1.5;
        word-wrap: break-word;
    }

    .message-time {
        font-size: 0.75em;
        opacity: 0.7;
        margin-top: 8px;
        text-align: right;
        display: block;
    }

    .message.sent .message-time {
        color: #b3d7ff;
    }

    .message.received .message-time {
        color: #6c757d;
    }

    .chat-header i {
        font-size: 1.3em;
        margin-right: 8px;
        color: #fff;
    }

    .input-group {
        display: flex;
        align-items: center;
    }

    .input-group .form-control {
        border: 2px solid #e9ecef;
        border-radius: 25px 0 0 25px;
        padding: 12px 20px;
        font-size: 0.95em;
        height: 48px;
        margin: 0;
        flex: 1;
    }

    .input-group .form-control:focus {
        border-color: #007bff;
        box-shadow: none;
    }

    .input-group .btn {
        border-radius: 0 25px 25px 0;
        padding: 12px 25px;
        font-weight: 600;
        background: linear-gradient(135deg, #007bff, #0056b3);
        border: none;
        height: 48px;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0;
    }

    .input-group .btn:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(0, 123, 255, 0.3);
    }
</style>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.0/signalr.min.js"></script>
<script>
    let chatConnection;
    let unreadCount = 0;
    let currentUserId = '@(User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value ?? "0")';
    let currentUserRole = '@(User.FindFirst(System.Security.Claims.ClaimTypes.Role)?.Value ?? "User")';
    let targetUserId = null;

    console.log('Current User ID:', currentUserId);
    console.log('Current User Role:', currentUserRole);

    document.addEventListener("DOMContentLoaded", function () {
        initializeChat();
    });

    function initializeChat() {
        console.log('Initializing chat...');

        // Initialize SignalR connection
        chatConnection = new signalR.HubConnectionBuilder()
            .withUrl("/chathub")
            .configureLogging(signalR.LogLevel.Information)
            .build();

        chatConnection.on("ReceiveMessage", (senderName, message, role, senderId) => {
            addMessageToChat(senderName, message, role, senderId);

            // Update unread count if chat is closed
            if (document.getElementById('chatWidget').classList.contains('d-none')) {
                unreadCount++;
                updateChatBadge(unreadCount);
            }
        });

        chatConnection.on("NewMessageNotification", (senderId, senderName) => {
            console.log('New message notification from:', senderName);
        });

        chatConnection.start().then(() => {
            console.log('SignalR connected successfully');
            initializeChatTarget();
        }).catch(err => {
            console.error('SignalR connection failed:', err);
            showError('Không thể kết nối đến server chat');
        });
    }

    function initializeChatTarget() {
        // Sử dụng API mới để lấy thông tin chat target
        fetch('/Chat/GetChatTarget')
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    targetUserId = data.targetUserId;
                    document.getElementById('chatTitle').innerHTML = `<i class="bi bi-chat-dots me-2"></i>${data.chatTitle}`;
                    loadChatHistory();
                } else {
                    document.getElementById('chatTitle').textContent = data.message;
                    showError(data.message);
                }
            })
            .catch(err => {
                console.error('Error getting chat target:', err);
                document.getElementById('chatTitle').textContent = 'Lỗi kết nối';
                showError('Không thể khởi tạo chat');
            });
    }

    function toggleChat() {
        const widget = document.getElementById('chatWidget');

        if (widget.classList.contains('d-none')) {
            widget.classList.remove('d-none');
            // Clear badge when opening chat
            unreadCount = 0;
            updateChatBadge(0);
            hideError();

            // Load latest messages when opening
            if (targetUserId) {
                loadChatHistory();
            }
        } else {
            widget.classList.add('d-none');
        }
    }

    function sendMessage() {
        const input = document.getElementById('messageInput');
        const message = input.value.trim();

        if (!message) {
            showError('Vui lòng nhập tin nhắn!');
            return;
        }

        if (!targetUserId) {
            showError('Không có người nhận hợp lệ!');
            return;
        }

        // Gọi SignalR với receiverId
        chatConnection.invoke("SendMessage", message, targetUserId)
            .then(() => {
                input.value = "";
                hideError();
            })
            .catch(err => {
                console.error('Error sending message:', err.toString());
                showError('Lỗi gửi tin nhắn: ' + err.message);
            });
    }

    function addMessageToChat(senderName, message, role, senderId) {
        const chatMessages = document.getElementById('chatMessages');
        const messageDiv = document.createElement('div');
        const isSender = senderId == currentUserId;
        messageDiv.className = `message ${isSender ? 'sent' : 'received'}`;

        const displayName = isSender ? 'Bạn' : senderName;
        const currentTime = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

        messageDiv.innerHTML = `
        <div class="message-bubble">
            <div class="message-sender">${displayName}</div>
            <div class="message-content">${message}</div>
            <div class="message-time">${currentTime}</div>
        </div>
    `;

        chatMessages.appendChild(messageDiv);
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    function updateChatBadge(count) {
        const badge = document.getElementById('chatBadge');
        if (count > 0) {
            badge.textContent = count;
            badge.classList.remove('d-none');
        } else {
            badge.classList.add('d-none');
        }
    }

    function showError(message) {
        const errorDiv = document.getElementById('errorMessage');
        errorDiv.textContent = message;
        errorDiv.classList.remove('d-none');

        // Auto hide after 5 seconds
        setTimeout(() => {
            hideError();
        }, 5000);
    }

    function hideError() {
        const errorDiv = document.getElementById('errorMessage');
        errorDiv.classList.add('d-none');
    }

    function loadChatHistory() {
        if (!targetUserId) {
            console.log('No target user ID, skipping chat history load');
            return;
        }

        console.log('Loading chat history with user:', targetUserId);

        // Load previous messages với otherUserId
        fetch(`/Chat/GetHistory?otherUserId=${targetUserId}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(messages => {
                console.log('Chat history loaded:', messages);
                const chatMessages = document.getElementById('chatMessages');
                chatMessages.innerHTML = '';

                messages.forEach(msg => {
                    addMessageToChat(msg.senderName, msg.content, msg.senderRole, msg.senderId);
                });
                hideError();
            })
            .catch(err => {
                console.error('Error loading chat history:', err);
                showError('Không thể tải lịch sử chat: ' + err.message);
            });
    }

    // Send message on Enter key
    document.addEventListener('keypress', function (e) {
        if (e.target.id === 'messageInput' && e.key === 'Enter') {
            e.preventDefault();
            sendMessage();
        }
    });
</script>